# -*- coding: utf-8 -*-
"""test_benchmarking.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1myqTW8ocmWO2V9KIAWpnLfxy2ShfsGGD
"""

import numpy as np
import time
from nashpy import Game

def generate_payoff_matrix(size):
    """
    Generates a random payoff matrix of a specified size for a game.

    Parameters:
    - size (int): The size of the payoff matrix to generate.

    Returns:
    - numpy.ndarray: A square matrix of shape (size, size) filled with random values.
    """
    return np.random.rand(size, size)

def benchmark_algorithm(algorithm, game):
    """
    Measure the time taken by a Nash equilibrium finding algorithm to compute equilibria for a given game.

    Parameters:
    - algorithm (callable): The Nash equilibrium algorithm to be benchmarked.
    - game (nashpy.Game): The game instance on which the algorithm is applied.

    Returns:
    - list: A list of calculated Nash equilibria.
    - float: The time taken to compute the equilibria, in seconds.
    """
    start_time = time.time()
    equilibria = list(algorithm())
    end_time = time.time()
    return equilibria, end_time - start_time

def profile_memory(algorithm, *args):
    """
    Profiles the peak memory usage of a given algorithm.

    Parameters:
    - algorithm (callable): The algorithm to profile.
    - *args: Arguments to be passed to the algorithm.

    Returns:
    - float: The peak memory usage in MiB.
    """
    mem_usage = memory_usage((algorithm, args), interval=0.01, timeout=120)
    return max(mem_usage)

